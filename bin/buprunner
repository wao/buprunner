#!/usr/bin/env ruby

ENV['BUNDLE_GEMFILE']=File.dirname( File.realpath( __FILE__ ) ) + "/../Gemfile"
require 'bundler/setup'

$:.push File.dirname( File.realpath( __FILE__ ) ) + "/../lib"

require 'fileutils'
require 'main'
require 'bup_runner'

include FileUtils
include BupRunner

# 1. Support mulitple repo or BUP_DIR
# 2, Support sperate index file
# 3, Support different backup dir
# 4, Support steps and batch mode
# 5, Support auto create repo if it missing


#bup_root = "/media/yangchen/ts2t/buproot"

#ENV["BUP_DIR"] = bup_root

#if !File.exist? bup_root
    #mkdir_p bup_root

    #system( "bup init" )
#end

#if !File.directory? bup_root
    #raise "Directory #{bup_root} should be a directory."
#end



#system( "bup index -uxpm --exclude-from ~/ignore.txt /home/yangchen" )
#system( "bup save --strip-path /home/yangchen -n myhome /home/yangchen" )
#system( "bup index -uxpm /media/yangchen/ext1t/photorepo" )
#system( "bup save --strip-path /media/yangchen/ext1t -n ext1t /media/yangchen/ext1t/photorepo" )

include BupRunner

Main do
    option 'config', 'c' do
        optional
        argument_required
        cast Pathname
        validate{ |p| p.exist? && p.file? }
    end

    option 'dry-run' do
        optional
    end

    def config_file 
        if params[:config].given?
            params[:config]
        else
            Pathname.new( "#{ENV['HOME']}/.buprunner.conf" )
        end
    end

    def parse_config
        @config = BackupConfig.load( config_file )
    end

    mode 'dump' do
        def run
            parse_config
            @config.targets.values.each do |t|
                puts "Target: %s" % [t.name]
                puts "  path: %s" % [t.path]
                puts
            end

            @config.repos.values.each do |t|
                puts "Repos: %s" % [t.path]
            end
        end
    end

    mode 'backup' do
        argument 'target_name'

        option 'verbose' do
            optional
        end

        option 'index-only' do
            optional
        end

        option 'save-only' do
            optional
        end
        
        def run
            parse_config
            target = @config.targets.values.find{ |r| r.name == params[:target_name].value }
            if target.nil?
                raise "Can't found backup target for name %s" % [ params[:target_name].value ]
            end

            driver = BupDriver.new( @config.select_repo, target )
            if params["dry-run"].given?
                driver.dry_run = true
                driver.verbose = true
            end

            if params[:verbose].given?
                driver.verbose = true
            end

            if !params['save-only'].given?
                driver.index
            end

            if !params['index-only'].given?
                driver.save
            end
        end
    end
end
